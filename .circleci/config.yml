version: 2.1

orbs:
  artifactory: specgen/artifactory@0.5.0

parameters:
  specgen-version:
    type: string
    default: 2.0.758
  specgen-version-major:
    type: string
    default: v2

jobs:
  tests:
    docker:
      - image: cimg/go:1.16.4
    working_directory: ~/specgen-tests
    steps:
      - checkout
      - run:
          name: Build tests
          command: |
            cd tests
            go test -c -o service-tests
      - persist_to_workspace:
          root: .
          paths:
            - tests

  scala-play:
    environment:
      SPECGEN_VERSION: <<pipeline.parameters.specgen-version>>
    working_directory: ~/specgen-tests
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - cache-{{ checksum "./scala-play/build.sbt" }}
      - run:
          name: Create temp folder for tests results
          command: mkdir -p /tmp/test-results
      - artifactory/setup-sbt:
          jfrog-server-url: specgen.jfrog.io
          repo-name: sbt
      - run:
          name: Build service
          command: |
            cd ./scala-play
            sbt compile < /dev/null
      - run:
          name: Run service
          command: |
            cd ./scala-play
            sbt -Dhttp.port=8081 run < /dev/null
          background: true
      - save_cache:
          key: cache-{{ checksum "./scala-play/build.sbt" }}
          paths:
            - ~/.sbt
            - ~/.ivy2
      - wait-url:
          url: http://localhost:8081/docs/index.html?url=swagger.yaml
      - go-tests:
          command: ./tests/service-tests -test.v

  java-spring:
    environment:
      SPECGEN_VERSION: <<pipeline.parameters.specgen-version>>
    working_directory: ~/specgen-tests
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - cache-{{ checksum "./java-spring/pom.xml" }}
      - run:
          name: Create temp folder for tests results
          command: mkdir -p /tmp/test-results
      - artifactory/setup-maven:
          jfrog-server-url: specgen.jfrog.io
          repo-name: maven
      - run:
          name: Build service
          command: |
            cd ./java-spring
            mvn clean compile -Dspecgen.version=<<pipeline.parameters.specgen-version>>
      - run:
          name: Run service
          command: |
            cd ./java-spring
            ./mvnw spring-boot:run -Dspecgen.version=<<pipeline.parameters.specgen-version>>
          background: true
      - wait-url:
          url: http://localhost:8081/swagger-ui/
      - save_cache:
          key: cache-{{ checksum "./java-spring/pom.xml" }}
          paths:
            - ~/.m2
      - go-tests:
          command: ./tests/service-tests -test.v

  go:
    working_directory: ~/specgen-tests
    docker:
      - image: cimg/go:1.16.4
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build service
          command: |
            cd ./go
            go install github.com/specgen-io/specgen/<<pipeline.parameters.specgen-version-major>>@v<<pipeline.parameters.specgen-version>>
            go generate
            go build
      - run:
          name: Run service
          command: |
            cd ./go
            go run service.go --port 8081
          background: true
      - wait-url:
          url: http://localhost:8081/docs/
      - go-tests:
          command: ./tests/service-tests -test.v

  ts-express:
    working_directory: ~/specgen-tests
    docker:
      - image: cimg/node:16.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - cache-{{ checksum "./ts-express/package.json" }}
      - run:
          name: Create temp folder for tests results
          command: mkdir -p /tmp/test-results
      - artifactory/setup-npm:
          jfrog-server-url: specgen.jfrog.io
          repo-name: npm
          scope: specgen.io
      - run:
          name: Build service
          command: |
            cd ./ts-express
            npm install @specgen.io/specgen.io@$SPECGEN_VERSION --save-dev
            npm install
            npm run specgen
            npm run build
      - run:
          name: Run service
          command: |
            cd ./ts-express
            npm run start
          background: true
      - save_cache:
          key: cache-{{ checksum "./ts-express/package.json" }}
          paths:
            - ~/specgen-tests/ts-express/node_modules
      - wait-url:
          url: http://localhost:8081/docs/
      - go-tests:
          command: ./tests/service-tests -test.v

  ts-koa:
    working_directory: ~/specgen-tests
    docker:
      - image: cimg/node:16.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - cache-{{ checksum "./ts-koa/package.json" }}
      - run:
          name: Create temp folder for tests results
          command: mkdir -p /tmp/test-results
      - artifactory/setup-npm:
          jfrog-server-url: specgen.jfrog.io
          repo-name: npm
          scope: specgen.io
      - run:
          name: Build service
          command: |
            cd ./ts-koa
            npm install @specgen.io/specgen.io@$SPECGEN_VERSION --save-dev
            npm install
            npm run specgen
            npm run build
      - run:
          name: Run service
          command: |
            cd ./ts-koa
            npm run start
          background: true
      - save_cache:
          key: cache-{{ checksum "./ts-koa/package.json" }}
          paths:
            - ~/specgen-tests/ts-koa/node_modules
      - wait-url:
          url: http://localhost:8081/docs/
      - go-tests:
          command: ./tests/service-tests -test.v

commands:
  go-tests:
    parameters:
      command:
        type: string
        default: go test
    steps:
      - run:
          name: Install go-junit-report
          command: |
            curl -L https://github.com/specgen-io/go-junit-report/releases/download/latest/go-junit-report_linux_amd64.zip > go-junit-report.zip
            unzip -o go-junit-report.zip
      - run:
          name: Run tests
          command: |
            mkdir -p ./test-results
            <<parameters.command>> 2>&1 | ./go-junit-report > ./test-results/go-test-report.xml
      - store_test_results:
          path: ./test-results
  wait-url:
    parameters:
      url:
        type: string
      sleep:
        type: integer
        default: 5
      attempts:
        type: integer
        default: 12
    steps:
      - run:
          name: Wait until url is available
          command: |
            attempt_counter=0
            max_attempts=<<parameters.attempts>>

            until $(curl --output /dev/null --silent --head --fail <<parameters.url>>); do
              if [ ${attempt_counter} -eq ${max_attempts} ];then
                echo "Max attempts reached"
                exit 1
              fi

              printf '.'
              attempt_counter=$(($attempt_counter+1))
              sleep <<parameters.sleep>>
            done

workflows:
  build-test:
    jobs:
      - tests
      - scala-play:
          context: specgen
          requires:
            - tests
      - java-spring:
          context: specgen
          requires:
            - tests
      - go:
          context: specgen
          requires:
            - tests
      - ts-express:
          context: specgen
          requires:
            - tests
      - ts-koa:
          context: specgen
          requires:
            - tests
